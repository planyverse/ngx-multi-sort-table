import { Subject, BehaviorSubject, delay, filter, tap } from 'rxjs';
import { Settings } from './utils.mjs';
export class TableData {
    // TODO refactor
    constructor(columns, options) {
        this._nextObservable = new Subject();
        this._previousObservable = new Subject();
        this._sizeObservable = new Subject();
        this._sortObservable = new Subject();
        this._sortHeadersObservable = new Subject();
        this._columns = new BehaviorSubject(columns.map(c => { if (c.isActive === undefined) {
            c.isActive = true;
        } return c; }));
        this._displayedColumns = this._columns.value.filter(c => c.isActive).map(c => c.id);
        if (options) {
            if (options.pageSizeOptions && options.pageSizeOptions.length < 1) {
                throw Error('Array of pageSizeOptions must contain at least one entry');
            }
            if (options.defaultSortParams) {
                options.defaultSortParams.map(s => {
                    if (!this._displayedColumns.includes(s)) {
                        throw Error(`Provided sort parameter "${s}" is not a column.`);
                    }
                });
            }
            this._sortParams = options.defaultSortParams || [];
            this._sortDirs = options.defaultSortDirs || [];
            if (this._sortParams.length !== this._sortDirs.length) {
                this._sortDirs = this._sortParams.map(() => 'asc');
            }
            this._totalElements = options.totalElements || 0;
            this._pageSizeOptions = options.pageSizeOptions || [10, 20, 50, 100];
            this._key = options.localStorageKey;
        }
        else {
            this._pageSizeOptions = [10, 20, 50, 100];
            this._sortParams = [];
            this._sortDirs = [];
        }
        this.init();
    }
    onSortEvent() {
        this._sortParams = this._dataSource.sort['actives'];
        this._sortDirs = this._dataSource.sort['directions'];
        this._clientSideSort();
        this._sortObservable.next();
        this.storeTableSettings();
    }
    onPaginationEvent($event) {
        const tmpPageSize = this.pageSize;
        this.pageSize = $event.pageSize;
        this.pageIndex = $event.pageIndex;
        if (tmpPageSize !== this.pageSize) {
            this._sizeObservable.next();
        }
        else if ($event.previousPageIndex && $event.previousPageIndex < $event.pageIndex) {
            this._nextObservable.next();
        }
        else if ($event.previousPageIndex && $event.previousPageIndex > $event.pageIndex) {
            this._previousObservable.next();
        }
    }
    updateSortHeaders() {
        // Dirty hack to display default sort column(s)
        const temp = Object.assign([], this._displayedColumns);
        this._sortHeadersObservable.next([]);
        this._sortHeadersObservable.next(temp);
        this._clientSideSort();
        this._sortObservable.next();
        this.storeTableSettings();
        1;
    }
    // this fixes an infine loop of rerendering
    subscribeSortHeaders() {
        this._sortHeadersObservable.pipe(delay(0),
        // ignore when there is no update in the sort (params or dirs)
        filter(() => this._displayedSortDirs !== this.sortDirs && this._displayedSortParams !== this.sortParams), tap((column) => {
            // update the displayed sort when it is not the empty array
            if (column.length > 0) {
                this._displayedSortDirs = this.sortDirs;
                this._displayedSortParams = this.sortParams;
            }
        })).subscribe(columns => this._displayedColumns = columns);
    }
    init() {
        this.subscribeSortHeaders();
        if (this._key) {
            const settings = new Settings(this._key);
            settings.load();
            if (this._isLocalStorageSettingsValid(settings)) {
                this.columns = settings.columns;
                this._sortDirs = settings.sortDirs;
                this._sortParams = settings.sortParams;
            }
            else {
                console.warn("Stored tableSettings are invalid. Using default");
            }
        }
    }
    _clientSideSort() {
        this._dataSource.orderData();
    }
    _isLocalStorageSettingsValid(settings) {
        // check if number of columns matching
        if (settings.columns.length !== this._columns.value.length) {
            return false;
        }
        // check if columns are the same
        for (var column of settings.columns) {
            var match = this._columns.value.filter(c => c.id == column.id && c.name == column.name);
            if (match === undefined) {
                return false;
            }
        }
        return true;
    }
    storeTableSettings() {
        console.log("Store");
        if (this._key) {
            const settings = new Settings(this._key);
            settings.columns = this._columns.value;
            settings.sortParams = this._sortParams;
            settings.sortDirs = this._sortDirs;
            settings.save();
        }
    }
    set totalElements(totalElements) {
        this._totalElements = totalElements;
    }
    get totalElements() {
        return this._totalElements;
    }
    set displayedColumns(displayedColumns) {
        this._displayedColumns = displayedColumns;
        this._columns.next(this._columns.value.map(c => {
            if (this._displayedColumns.includes(c.id)) {
                c.isActive = true;
            }
            else
                c.isActive = false;
            return c;
        }));
    }
    get displayedColumns() {
        return this._displayedColumns;
    }
    set dataSource(dataSource) {
        this._dataSource = dataSource;
        if (this._sortParams.length > 0) {
            this._dataSource.sort.actives = this._sortParams;
            this._dataSource.sort.directions = this._sortDirs.map(v => v);
            this.updateSortHeaders();
        }
    }
    get dataSource() {
        return this._dataSource;
    }
    set data(data) {
        this._dataSource.data = data;
        this._clientSideSort();
    }
    set columns(v) {
        this._columns.next(v.map(c => { if (c.isActive === undefined) {
            c.isActive = true;
        } return c; }));
    }
    onColumnsChange() {
        return this._columns;
    }
    updateColumnNames(v) {
        const dict = {};
        v.forEach(c => dict[c.id] = c.name);
        this._columns.next(this._columns.value.map(c => { c.name = dict[c.id] || c.name; return c; }));
    }
    get nextObservable() {
        return this._nextObservable;
    }
    get previousObservable() {
        return this._previousObservable;
    }
    get sizeObservable() {
        return this._sizeObservable;
    }
    get sortObservable() {
        return this._sortObservable;
    }
    get sortParams() {
        return this._sortParams;
    }
    get sortDirs() {
        return this._sortDirs;
    }
    get columns() {
        return this._columns.value;
    }
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    set sortParams(v) {
        this._sortParams = v;
        this._dataSource.sort.actives = this._sortParams;
    }
    set sortDirs(v) {
        this._sortDirs = v;
        this._dataSource.sort.directions = this._sortDirs.map(elem => elem);
    }
}
//# sourceMappingURL=data:application/json;base64,
